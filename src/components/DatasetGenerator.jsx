import { useState, useEffect } from 'react'; const API_URL = 'http://localhost:5000/api'; const DatasetGenerator = () => { const [rowCount, setRowCount] = useState(300); const [dataset, setDataset] = useState([]); const [isGenerated, setIsGenerated] = useState(false); const [isSaving, setIsSaving] = useState(false); const [statusMessage, setStatusMessage] = useState(null); const [errorMessage, setErrorMessage] = useState(null); const [totalRecords, setTotalRecords] = useState(0); const [balancedDistribution, setBalancedDistribution] = useState(true); const vitalRanges = { bloodPressure: { normal: { systolic: [90, 120], diastolic: [60, 80] }, abnormal: { systolic: [121, 139], diastolic: [81, 89] }, criticalLow: { systolic: [60, 89], diastolic: [40, 59] }, criticalHigh: { systolic: [140, 200], diastolic: [90, 120] } }, heartRate: { normal: [60, 100], abnormal: [101, 120], criticalLow: [30, 59], criticalHigh: [121, 180] }, oxygenLevel: { normal: [95, 100], abnormal: [90, 94], criticalLow: [70, 89], criticalHigh: [100, 100] }, temperature: { normal: [36.1, 37.2], abnormal: [37.3, 38.5], criticalLow: [32.0, 36.0], criticalHigh: [38.6, 42.0] } }; const patientProfiles = { normal: { name: "Healthy Patient", vitalCorrelations: { bloodPressure: { status: 'normal', variance: 0.1 }, heartRate: { status: 'normal', variance: 0.1 }, oxygenLevel: { status: 'normal', variance: 0.05 }, temperature: { status: 'normal', variance: 0.1 } } }, hypertensive: { name: "Hypertensive Patient", vitalCorrelations: { bloodPressure: { status: 'abnormal', variance: 0.2 }, heartRate: { status: 'normal', variance: 0.15, bias: 5 }, oxygenLevel: { status: 'normal', variance: 0.1 }, temperature: { status: 'normal', variance: 0.1 } } }, cardiacStress: { name: "Cardiac Stress", vitalCorrelations: { bloodPressure: { status: 'abnormal', variance: 0.3 }, heartRate: { status: 'abnormal', variance: 0.2 }, oxygenLevel: { status: 'abnormal', variance: 0.15 }, temperature: { status: 'normal', variance: 0.1 } } }, respiratory: { name: "Respiratory Issues", vitalCorrelations: { bloodPressure: { status: 'normal', variance: 0.15 }, heartRate: { status: 'abnormal', variance: 0.2, bias: 10 }, oxygenLevel: { status: 'abnormal', variance: 0.2 }, temperature: { status: 'normal', variance: 0.1 } } }, infection: { name: "Infectious Process", vitalCorrelations: { bloodPressure: { status: 'normal', variance: 0.2 }, heartRate: { status: 'abnormal', variance: 0.25, bias: 15 }, oxygenLevel: { status: 'normal', variance: 0.15, bias: -2 }, temperature: { status: 'abnormal', variance: 0.3 } } }, criticalShock: { name: "Shock/Critical", vitalCorrelations: { bloodPressure: { status: 'critical', variance: 0.4, preferLow: true }, heartRate: { status: 'critical', variance: 0.3, preferHigh: true }, oxygenLevel: { status: 'critical', variance: 0.25, preferLow: true }, temperature: { status: 'abnormal', variance: 0.2 } } }, criticalHypertensive: { name: "Hypertensive Crisis", vitalCorrelations: { bloodPressure: { status: 'critical', variance: 0.3, preferHigh: true }, heartRate: { status: 'abnormal', variance: 0.2 }, oxygenLevel: { status: 'abnormal', variance: 0.15 }, temperature: { status: 'normal', variance: 0.15 } } }, criticalRespiratory: { name: "Respiratory Failure", vitalCorrelations: { bloodPressure: { status: 'abnormal', variance: 0.25 }, heartRate: { status: 'critical', variance: 0.3, preferHigh: true }, oxygenLevel: { status: 'critical', variance: 0.3, preferLow: true }, temperature: { status: 'abnormal', variance: 0.2 } } } }; useEffect(() => { fetchRecordCount(); }, []); useEffect(() => { if (statusMessage || errorMessage) { const timer = setTimeout(() => { setStatusMessage(null); setErrorMessage(null); }, 5000); return () => clearTimeout(timer); } }, [statusMessage, errorMessage]); const t = (data,dur,col,tcol) => { Toastify({ text: data, duration: dur, gravity: "top", position: "center", style: { background: col, color: tcol } }).showToast(); }; const fetchRecordCount = async () => { try { const response = await fetch(`${API_URL}/record-count`); const data = await response.json(); setTotalRecords(data.count); } catch (error) { console.error('Error fetching record count:', error); setErrorMessage('Could not connect to server. Is the backend running?'); t('Could not connect to server. Is the backend running?',2000,"black","white") } }; const getRandomInRange = (min, max) => { return Math.random() * (max - min) + min; }; const generateVitalWithCorrelation = (vitalType, profile, correlation) => { let range, status; if (correlation.status === 'critical') { if (correlation.preferLow) { range = vitalRanges[vitalType].criticalLow; status = 'critical'; } else if (correlation.preferHigh) { range = vitalRanges[vitalType].criticalHigh; status = 'critical'; } else { const useLow = Math.random() < 0.5; range = useLow ? vitalRanges[vitalType].criticalLow : vitalRanges[vitalType].criticalHigh; status = 'critical'; } } else { range = vitalRanges[vitalType][correlation.status]; status = correlation.status; } let value; if (vitalType === 'bloodPressure') { const systolic = Math.round(getRandomInRange(range.systolic[0], range.systolic[1])); const diastolic = Math.round(getRandomInRange(range.diastolic[0], range.diastolic[1])); const systolicBias = correlation.bias || 0; const diastolicBias = Math.round(systolicBias * 0.6); return { systolic: Math.max(60, Math.min(250, systolic + systolicBias)), diastolic: Math.max(40, Math.min(150, diastolic + diastolicBias)), status }; } else { value = getRandomInRange(range[0], range[1]); if (correlation.bias) { value += correlation.bias; } const variance = correlation.variance || 0.1; const varianceAmount = (range[1] - range[0]) * variance * (Math.random() - 0.5); value += varianceAmount; if (vitalType === 'heartRate') { value = Math.max(30, Math.min(200, Math.round(value))); } else if (vitalType === 'oxygenLevel') { value = Math.max(70, Math.min(100, parseFloat(value.toFixed(2)))); } else if (vitalType === 'temperature') { value = Math.max(32, Math.min(45, parseFloat(value.toFixed(2)))); } return { value, status }; } }; const determineOverallStatus = (vitalStatuses) => { if (vitalStatuses.some(status => status === 'critical')) { return 'critical'; } else if (vitalStatuses.some(status => status === 'abnormal')) { return 'abnormal'; } else { return 'normal'; } }; const generateRealisticRow = (id, targetStatus) => { let profileKeys; if (targetStatus === 'normal') { profileKeys = ['normal']; } else if (targetStatus === 'abnormal') { profileKeys = ['hypertensive', 'cardiacStress', 'respiratory', 'infection']; } else { profileKeys = ['criticalShock', 'criticalHypertensive', 'criticalRespiratory']; } const selectedProfileKey = profileKeys[Math.floor(Math.random() * profileKeys.length)]; const profile = patientProfiles[selectedProfileKey]; const bloodPressure = generateVitalWithCorrelation('bloodPressure', profile, profile.vitalCorrelations.bloodPressure); const heartRate = generateVitalWithCorrelation('heartRate', profile, profile.vitalCorrelations.heartRate); const oxygenLevel = generateVitalWithCorrelation('oxygenLevel', profile, profile.vitalCorrelations.oxygenLevel); const temperature = generateVitalWithCorrelation('temperature', profile, profile.vitalCorrelations.temperature); let finalBpStatus = bloodPressure.status; let finalHrStatus = heartRate.status; let finalO2Status = oxygenLevel.status; let finalTempStatus = temperature.status; if (Math.random() < 0.1) { const vitalToAdjust = Math.floor(Math.random() * 4); const possibleStatuses = ['normal', 'abnormal']; const newStatus = possibleStatuses[Math.floor(Math.random() * possibleStatuses.length)]; switch(vitalToAdjust) { case 0: finalBpStatus = newStatus; break; case 1: finalHrStatus = newStatus; break; case 2: finalO2Status = newStatus; break; case 3: finalTempStatus = newStatus; break; } } const date = new Date(); date.setDate(date.getDate() - Math.floor(Math.random() * 30)); const timestamp = date.toISOString(); return { id: totalRecords + id, timestamp, systolic: bloodPressure.systolic, diastolic: bloodPressure.diastolic, bloodPressureStatus: finalBpStatus, heartRate: heartRate.value, heartRateStatus: finalHrStatus, oxygenLevel: oxygenLevel.value, oxygenLevelStatus: finalO2Status, temperature: temperature.value, temperatureStatus: finalTempStatus, patientProfile: profile.name }; }; const generateRowWeighted = (id) => { const statusSelector = Math.random(); let targetStatus; if (statusSelector < 0.7) { targetStatus = 'normal'; } else if (statusSelector < 0.9) { targetStatus = 'abnormal'; } else { targetStatus = 'critical'; } return generateRealisticRow(id, targetStatus); }; const generateAndSaveDataset = async () => { try { const newDataset = []; if (balancedDistribution) { const recordsPerStatus = Math.floor(rowCount / 3); const remainder = rowCount % 3; for (let i = 1; i <= recordsPerStatus + (remainder > 0 ? 1 : 0); i++) { newDataset.push(generateRealisticRow(newDataset.length + 1, 'normal')); } for (let i = 1; i <= recordsPerStatus + (remainder > 1 ? 1 : 0); i++) { newDataset.push(generateRealisticRow(newDataset.length + 1, 'abnormal')); } for (let i = 1; i <= recordsPerStatus; i++) { newDataset.push(generateRealisticRow(newDataset.length + 1, 'critical')); } for (let i = newDataset.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1)); [newDataset[i], newDataset[j]] = [newDataset[j], newDataset[i]]; } } else { for (let i = 1; i <= rowCount; i++) { newDataset.push(generateRowWeighted(i)); } } const cleanDataset = newDataset.map(record => { const { patientProfile, ...cleanRecord } = record; return cleanRecord; }); setDataset(newDataset); setIsGenerated(true); setIsSaving(true); setErrorMessage(null); setStatusMessage('Generating and saving realistic correlated health data...'); const response = await fetch(`${API_URL}/save-data`, { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ dataset: cleanDataset }), }); const result = await response.json(); if (result.success) { const overallStatusCounts = newDataset.reduce((counts, record) => { const statuses = [ record.bloodPressureStatus, record.heartRateStatus, record.oxygenLevelStatus, record.temperatureStatus ]; let overallStatus = 'normal'; if (statuses.includes('critical')) { overallStatus = 'critical'; } else if (statuses.includes('abnormal')) { overallStatus = 'abnormal'; } counts[overallStatus] = (counts[overallStatus] || 0) + 1; return counts; }, {}); const profileCounts = newDataset.reduce((counts, record) => { counts[record.patientProfile] = (counts[record.patientProfile] || 0) + 1; return counts; }, {}); const distributionMessage = ` Overall Status - Normal: ${overallStatusCounts.normal || 0}, Abnormal: ${overallStatusCounts.abnormal || 0}, Critical: ${overallStatusCounts.critical || 0} `; const profileMessage = Object.entries(profileCounts) .map(([profile, count]) => `${profile}: ${count}`) .join(', '); setStatusMessage(`Saved ${newDataset.length} realistic health records to health_data.csv. ${distributionMessage} Patient Profiles: ${profileMessage}`); await fetchRecordCount(); t(`Successfully generated ${newDataset.length} realistic correlated health records!`, 3000, "green", "white"); } else { throw new Error(result.message || 'Failed to save data'); } } catch (error) { console.error('Error generating and saving data:', error); setErrorMessage(`Error: ${error.message}`); t(`Error: ${error.message}`, 3000, "red", "white"); } finally { setIsSaving(false); } }; const handleRowCountChange = (value) => { const count = parseInt(value) || 300; setRowCount(count); }; return ( <div className="dataset-generator"> <h2>DATA GENERATOR</h2> <div className="server-status"> <p> <strong>Server:</strong> {errorMessage ? <span className="status-error">Disconnected</span> : <span className="status-connected">Connected</span> } </p> <p><strong>Total Records in health_data.csv:</strong> {totalRecords}</p> </div> <div className="controls"> <div className="form-group"> <label htmlFor="rowCount">Number of Records to Generate:</label> <input type="text" id="rowCount" value={rowCount} onChange={(e) => handleRowCountChange(e.target.value)} min="1" max="1000000" /> </div> <div className="form-group checkbox"> <input type="checkbox" id="balancedDistribution" checked={balancedDistribution} onChange={(e) => setBalancedDistribution(e.target.checked)} /> <label htmlFor="balancedDistribution"> Balanced Distribution (Equal Normal/Abnormal/Critical) </label> </div> <button onClick={generateAndSaveDataset} className="generate-btn" disabled={isSaving} > {isSaving ? 'Generating Data...' : 'Generate'} </button> </div> {balancedDistribution && ( <div className="distribution-info"> <p> <strong>Balanced Distribution:</strong> Normal: {Math.floor(rowCount / 3) + (rowCount % 3 > 0 ? 1 : 0)}, Abnormal: {Math.floor(rowCount / 3) + (rowCount % 3 > 1 ? 1 : 0)}, Critical: {Math.floor(rowCount / 3)} </p> </div> )} {!balancedDistribution && ( <div className="distribution-info"> <p> <strong>Weighted Distribution:</strong> ~70% Normal, ~20% Abnormal, ~10% Critical (realistic medical distribution) </p> </div> )} {errorMessage && ( <div className="error-message"> {errorMessage} </div> )} {statusMessage && ( <div className="success-message"> {statusMessage} </div> )} {isGenerated && ( <div className="preview"> <h3>Preview (first 10 realistic records)</h3> <table> <thead> <tr> <th>ID</th> <th>Patient Profile</th> <th>Timestamp</th> <th>Blood Pressure</th> <th>Status</th> <th>Heart Rate</th> <th>Status</th> <th>Oxygen Level</th> <th>Status</th> <th>Temperature</th> <th>Status</th> </tr> </thead> <tbody> {dataset.slice(0, 10).map((row) => ( <tr key={row.id}> <td>{row.id}</td> <td className="patient-profile">{row.patientProfile}</td> <td>{new Date(row.timestamp).toLocaleString()}</td> <td>{row.systolic}/{row.diastolic}</td> <td className={`status ${row.bloodPressureStatus}`}>{row.bloodPressureStatus}</td> <td>{row.heartRate}</td> <td className={`status ${row.heartRateStatus}`}>{row.heartRateStatus}</td> <td>{row.oxygenLevel}%</td> <td className={`status ${row.oxygenLevelStatus}`}>{row.oxygenLevelStatus}</td> <td>{row.temperature}°C</td> <td className={`status ${row.temperatureStatus}`}>{row.temperatureStatus}</td> </tr> ))} </tbody> </table> <div className="dataset-summary"> <h4>Realistic Dataset Analysis</h4> <div className="summary-stats"> {(() => { const overallStatusCounts = dataset.reduce((counts, record) => { const statuses = [ record.bloodPressureStatus, record.heartRateStatus, record.oxygenLevelStatus, record.temperatureStatus ]; let overallStatus = 'normal'; if (statuses.includes('critical')) { overallStatus = 'critical'; } else if (statuses.includes('abnormal')) { overallStatus = 'abnormal'; } counts[overallStatus] = (counts[overallStatus] || 0) + 1; return counts; }, {}); const profileCounts = dataset.reduce((counts, record) => { counts[record.patientProfile] = (counts[record.patientProfile] || 0) + 1; return counts; }, {}); return ( <div> <div className="distribution-chart"> <h5>Overall Patient Status Distribution</h5> {Object.entries(overallStatusCounts).map(([status, count]) => ( <div key={status} className="distribution-item"> <span className="label">{status.charAt(0).toUpperCase() + status.slice(1)}:</span> <div className="bar-container"> <div className={`bar ${status}`} style={{ width: `${(count / dataset.length * 100)}%` }} ></div> <span className="value">{count} ({(count / dataset.length * 100).toFixed(2)}%)</span> </div> </div> ))} </div> <div className="profile-distribution"> <h5>Patient Profile Distribution</h5> {Object.entries(profileCounts).map(([profile, count]) => ( <div key={profile} className="profile-item"> <span className="profile-name">{profile}:</span> <span className="profile-count">{count} patients ({(count / dataset.length * 100).toFixed(1)}%)</span> </div> ))} </div> </div> ); })()} </div> </div> <div className="correlation-info"> <h5>Data Realism Features</h5> <ul> <li>✅ Vital signs are correlated based on medical conditions</li> <li>✅ Hypertensive patients have elevated BP with slightly higher HR</li> <li>✅ Respiratory issues affect both O2 levels and compensatory HR increase</li> <li>✅ Infections cause fever with increased HR and slightly lower O2</li> <li>✅ Critical patients show multiple system involvement</li> <li>✅ Realistic measurement variance and physiological noise</li> </ul> </div> <p><strong>Realistic records generated:</strong> {dataset.length}</p> </div> )} </div> );
}; export default DatasetGenerator; 