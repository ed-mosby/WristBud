import React, { useEffect, useRef } from 'react'; const nodeColors = { input: '#3498db', hidden: '#9b59b6', output: '#e74c3c', }; const NetworkVisualizer = ({ inputCount = 5, hiddenCount = 6, outputCount = 3, trigger }) => { const canvasRef = useRef(); useEffect(() => { const canvas = canvasRef.current; const ctx = canvas.getContext('2d'); const w = canvas.width = 600; const h = canvas.height = 300; const layers = [ { count: inputCount, x: 50, color: nodeColors.input }, { count: hiddenCount, x: 300, color: nodeColors.hidden }, { count: outputCount, x: 550, color: nodeColors.output }, ]; const radius = 12; const nodes = layers.map(layer => Array.from({ length: layer.count }, (_, i) => ({ x: layer.x, y: (i + 1) * (h / (layer.count + 1)), color: layer.color, })) ); const connections = []; for (let i = 0; i < nodes.length - 1; i++) { for (let from of nodes[i]) { for (let to of nodes[i + 1]) { connections.push({ from, to }); } } } const drawNetwork = () => { ctx.clearRect(0, 0, w, h); ctx.globalAlpha = 0.3; for (let { from, to } of connections) { ctx.beginPath(); ctx.moveTo(from.x, from.y); ctx.lineTo(to.x, to.y); ctx.strokeStyle = '#ccc'; ctx.stroke(); } ctx.globalAlpha = 1.0; for (let layer of nodes) { for (let node of layer) { ctx.beginPath(); ctx.arc(node.x, node.y, radius, 0, Math.PI * 2); ctx.fillStyle = node.color; ctx.fill(); } } }; let dotIndex = 0; const animateSignal = () => { drawNetwork(); const path = connections[dotIndex % connections.length]; const progress = (dotIndex % 100) / 100; const dotX = path.from.x + (path.to.x - path.from.x) * progress; const dotY = path.from.y + (path.to.y - path.from.y) * progress; ctx.beginPath(); ctx.arc(dotX, dotY, 6, 0, Math.PI * 2); ctx.fillStyle = '#2ecc71'; ctx.fill(); dotIndex += 2; if (dotIndex < connections.length * 100) { requestAnimationFrame(animateSignal); } }; drawNetwork(); if (trigger) animateSignal(); }, [trigger]); return ( <div className="network-visualizer"> <h4>Neural Network Visualization</h4> <canvas ref={canvasRef} width={600} height={300} /> </div> ); }; export default NetworkVisualizer; 